// <auto-generated />
using System;
using Devify.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Devify.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231007031159_1072023")]
    partial class _1072023
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Devify.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ff045d07-be86-4a4e-bfa4-0264ec832c12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cacfd63-257e-425a-b5b5-6d0b3479682a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBvcYdxMbNvW6GrbB06qvsmPwac9Pgaizc75yBZkQYgARY5VGg0+KLUXHqFVzXsN4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38e49da7-0f26-442d-8ef8-f0dbef05d403",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "e0ed2b3d-2c72-4a84-bd60-1ff9a78ee084",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9cd6004-18d1-4866-b362-d4f5a0b43e2d",
                            Email = "manager@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "SUPERMANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDRpsXvmRWSCWBXUg8zxM1+1Z0uMVjEJVJGk+6lUIMH7u4/wXZo2HstTxgqp3otqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b09a0b2d-721f-470b-a36e-d3dedea95f38",
                            TwoFactorEnabled = false,
                            UserName = "SuperManager"
                        },
                        new
                        {
                            Id = "8b4a17e1-4a1a-44e3-9a95-c2b59b7a7a4c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bbf4f8e-1d8c-4699-8b82-a9652e587630",
                            Email = "duocdev26@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUOCDEV26@GMAIL.COM",
                            NormalizedUserName = "DUOCDEV",
                            PasswordHash = "AQAAAAIAAYagAAAAEJAYzFFOafD+2yUA7q0ccziRKQGHl7ylTSwpNmeVwanwGHsRMF4iXsm/DxprftwGhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9506f2c-bf9e-49b9-b00e-457fd50d8e4a",
                            TwoFactorEnabled = false,
                            UserName = "DuocDev"
                        },
                        new
                        {
                            Id = "d9e03227-9b87-40b5-9c7b-3a8578b6c04c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73e4e58b-9da2-45c3-9bd3-5bd2cdbadb2d",
                            Email = "codedao6@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CODEDAO@GMAIL.COM",
                            NormalizedUserName = "TOIDICODEDAO",
                            PasswordHash = "AQAAAAIAAYagAAAAEBpwdRGx8wdaYXoDTc9IGg+iX+nS8x5yWdk0SmUIy8xcLHRSWAaxyvZd2oOi15X2Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "512282a0-fd88-4c7b-b806-9abc8d78e4f6",
                            TwoFactorEnabled = false,
                            UserName = "ToiDiCodeDao"
                        },
                        new
                        {
                            Id = "51274390-9171-49dd-a3e7-6e23fbf327fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26dcc454-208f-46fd-b602-53e865aff1e1",
                            Email = "hoidanit@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HOIDANIT@GMAIL.COM",
                            NormalizedUserName = "HOIDANIT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKziBNfWwI8pPXGWCtGoRb41qRoHg6Z4+aRjoLR6z3JlkElPs13XkeR67IDfXCa0VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e3aa393-2f3f-4f31-b2b9-cc8b54e83927",
                            TwoFactorEnabled = false,
                            UserName = "HoiDanIT"
                        },
                        new
                        {
                            Id = "9b2eb0a3-7d3c-4671-8d16-30c69d20a7c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "721d327b-2d58-4eb7-ad5d-f09d4c385593",
                            Email = "tedulms@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEDULMS@GMAIL.COM",
                            NormalizedUserName = "TEDULMS",
                            PasswordHash = "AQAAAAIAAYagAAAAEIUh1oglwCoRPeAJCWMv/6x1GJdJA+gYXv4xtOwdbwxCTf/uMgSb4aYoUFrph7y4aQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ad13aed-1c32-4b57-b6c7-38e74c088a0e",
                            TwoFactorEnabled = false,
                            UserName = "TeduLMS"
                        },
                        new
                        {
                            Id = "3f9f0d9e-67af-4a8d-9aa6-5f2270fc9fbb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a8491fc-b280-4e12-92d6-e8ea27181e32",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXOa9ZQXnmXuQWa2c1MD5hU5cbr75YrIllND16kzGgODraurgbXKMd8+uXHulX28Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "748b0493-e353-4f64-ab04-191862a0c3ac",
                            TwoFactorEnabled = false,
                            UserName = "Customer"
                        },
                        new
                        {
                            Id = "6e6e4976-631d-46fb-91ea-11e70fb7087a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb6fcd47-9e77-46af-becf-235b688bac6e",
                            Email = "clone@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLONE@GMAIL.COM",
                            NormalizedUserName = "CLONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUSEX6NWYLlP1hx+vaVUHEGvBWS1kugzLnI6Sdc2C5tt18nxPGPB14+jJMRzqHf7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "862b54c1-c19c-422c-9b79-e68dbd9c8292",
                            TwoFactorEnabled = false,
                            UserName = "Clone"
                        },
                        new
                        {
                            Id = "2b2e0d9b-74dd-4928-8c24-1a3156d9fc41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2e03f9a-b734-4df8-8769-034958db8e82",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEDbP8FJ1a2Qv5hB4RgXukAI1+VdhtG7WfpWp8izdmluhN2x/i/pyJYqWUuz9uxk79A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed3586c4-9659-4b43-8291-bb01d2e1142b",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Devify.Entity.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Devify.Entity.Chapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Step")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ChapterId");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Devify.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Devify.Entity.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseLevelId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long>("Purchased")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseLevelId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Devify.Entity.CourseLevel", b =>
                {
                    b.Property<string>("CourseLevelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CourseLevelId");

                    b.ToTable("CourseLevels");
                });

            modelBuilder.Entity("Devify.Entity.Course_Language", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Course_Languages");
                });

            modelBuilder.Entity("Devify.Entity.Creator", b =>
                {
                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreatorId");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Devify.Entity.DetailOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CoursePrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("DetailOrders");
                });

            modelBuilder.Entity("Devify.Entity.Language", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Devify.Entity.Lesson", b =>
                {
                    b.Property<Guid>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Step")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Devify.Entity.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Devify.Entity.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<string>("UserBuyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserBuyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Devify.Entity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Devify.Entity.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SliderId"));

                    b.Property<string>("Button")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2ca8fa08-4a80-4714-a5fb-17b7316fddc4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c6de4ab5-2df7-4a6c-9bbd-2e1b68f8ebdd",
                            Name = "Creator",
                            NormalizedName = "CREATOR"
                        },
                        new
                        {
                            Id = "f28ad7f6-6c3d-4f0f-b9a4-60bca4b57bb3",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ff045d07-be86-4a4e-bfa4-0264ec832c12",
                            RoleId = "2ca8fa08-4a80-4714-a5fb-17b7316fddc4"
                        },
                        new
                        {
                            UserId = "e0ed2b3d-2c72-4a84-bd60-1ff9a78ee084",
                            RoleId = "2ca8fa08-4a80-4714-a5fb-17b7316fddc4"
                        },
                        new
                        {
                            UserId = "8b4a17e1-4a1a-44e3-9a95-c2b59b7a7a4c",
                            RoleId = "c6de4ab5-2df7-4a6c-9bbd-2e1b68f8ebdd"
                        },
                        new
                        {
                            UserId = "d9e03227-9b87-40b5-9c7b-3a8578b6c04c",
                            RoleId = "c6de4ab5-2df7-4a6c-9bbd-2e1b68f8ebdd"
                        },
                        new
                        {
                            UserId = "51274390-9171-49dd-a3e7-6e23fbf327fb",
                            RoleId = "c6de4ab5-2df7-4a6c-9bbd-2e1b68f8ebdd"
                        },
                        new
                        {
                            UserId = "9b2eb0a3-7d3c-4671-8d16-30c69d20a7c9",
                            RoleId = "c6de4ab5-2df7-4a6c-9bbd-2e1b68f8ebdd"
                        },
                        new
                        {
                            UserId = "3f9f0d9e-67af-4a8d-9aa6-5f2270fc9fbb",
                            RoleId = "f28ad7f6-6c3d-4f0f-b9a4-60bca4b57bb3"
                        },
                        new
                        {
                            UserId = "6e6e4976-631d-46fb-91ea-11e70fb7087a",
                            RoleId = "f28ad7f6-6c3d-4f0f-b9a4-60bca4b57bb3"
                        },
                        new
                        {
                            UserId = "2b2e0d9b-74dd-4928-8c24-1a3156d9fc41",
                            RoleId = "f28ad7f6-6c3d-4f0f-b9a4-60bca4b57bb3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Devify.Entity.Chapter", b =>
                {
                    b.HasOne("Devify.Entity.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Devify.Entity.Comment", b =>
                {
                    b.HasOne("Devify.Entity.Lesson", "Lesson")
                        .WithMany("Comments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Devify.Entity.Course", b =>
                {
                    b.HasOne("Devify.Entity.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devify.Entity.CourseLevel", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("CourseLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devify.Entity.Creator", "Creator")
                        .WithMany("Courses")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CourseLevel");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Devify.Entity.Course_Language", b =>
                {
                    b.HasOne("Devify.Entity.Course", "Course")
                        .WithMany("CourseLanguages")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devify.Entity.Language", "Language")
                        .WithMany("CourseLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Devify.Entity.Creator", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", "User")
                        .WithOne("Creator")
                        .HasForeignKey("Devify.Entity.Creator", "CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Devify.Entity.DetailOrder", b =>
                {
                    b.HasOne("Devify.Entity.Course", "Course")
                        .WithMany("DetailOrders")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Devify.Entity.Order", "Order")
                        .WithMany("DetailOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Devify.Entity.Lesson", b =>
                {
                    b.HasOne("Devify.Entity.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Devify.Entity.Notification", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Devify.Entity.Order", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserBuyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Devify.Entity.RefreshToken", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Devify.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Devify.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Devify.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Creator");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Devify.Entity.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Devify.Entity.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Devify.Entity.Course", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("CourseLanguages");

                    b.Navigation("DetailOrders");
                });

            modelBuilder.Entity("Devify.Entity.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Devify.Entity.Creator", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Devify.Entity.Language", b =>
                {
                    b.Navigation("CourseLanguages");
                });

            modelBuilder.Entity("Devify.Entity.Lesson", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Devify.Entity.Order", b =>
                {
                    b.Navigation("DetailOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
